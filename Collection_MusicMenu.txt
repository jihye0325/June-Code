package com.kh.music.view;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

import com.kh.music.controller.MusicController;
import com.kh.music.model.comparator.AscTitle;
import com.kh.music.model.comparator.DescArtist;
import com.kh.music.model.comparator.DescTitle;
import com.kh.music.model.vo.Music;

public class MusicMenu {
	
	private MusicController mc = new MusicController();
	Scanner sc = new Scanner(System.in);
	
	public void mainMenu() {
		mc.startProgram();
		
		while(true) {
			System.out.println("========== 메뉴 ==========");
			System.out.println("1. 곡 추가");
			System.out.println("2. 곡 전체 조회");
			System.out.println("3. 정렬하여 조회");
			System.out.println("4. 가수명으로 검색");
			System.out.println("5. 곡명으로 검색");
			System.out.println("6. 곡 정보 수정");
			System.out.println("7. 곡 삭제");
			System.out.println("0. 프로그램 종료");
			System.out.print("메뉴 선택 : ");
			int menu = sc.nextInt();
			sc.nextLine();
			
			switch(menu) {
			case 1 :
				addList();
				break;
			case 2 :
				selectList();
				break;
			case 3 :
				sortMenu();
				break;
			case 4 :
				searchArtist();
				break;
			case 5 :
				searchTitle();
				break;
			case 6 :
				updateMusic();
				break;
			case 7 :
				removeMusic();
				break;
			case 0 : 
				System.out.println("프로그램을 종료합니다.");
				mc.endProgram();
				return;		// 호출했던 Run으로 돌아가도록			
			default :
				System.out.println("잘못 선택하셨습니다. 번호를 다시 입력해주세요.");
			}
		}
	}

	// 곡 추가
	public void addList() {
		System.out.println("===== 곡 추가 =====");
		System.out.print("가수 입력 : ");
		String artist = sc.nextLine();
		System.out.print("제목 입력 : ");
		String title = sc.nextLine();
		
		mc.addList(new Music(artist, title));
	}		
	
	// 곡 전체 조회
	public void selectList() {
		System.out.println("===== 곡 전체 조회 =====");
		ArrayList<Music> list = mc.selectList();
		
		if(list.isEmpty()) {
			System.out.println("저장 된 곡 목록이 존재하지 않습니다.");
		}		// empty가 아니라면 if문에 안걸리고 아래로 내려감
		
		for(Music m : list) {
			System.out.println(m);
		}
	}
		
	// 가수명으로 검색
	public void searchArtist() {
		System.out.println("===== 가수명으로 검색 =====");
		System.out.print("가수명 입력 : ");
		ArrayList<Music> search = mc.searchArtist(sc.nextLine());	// 입력받은 가수명을 매개변수로 넘겨서 search된 목록을 리턴받음
	
		if(search.isEmpty())
			System.out.println("검색된 곡 목록이 존재하지 않습니다.");
		
		for(Music m : search) {
			System.out.println(m);
		}
	}
	
	// 곡명으로 검색
	public void searchTitle() {
		System.out.println("===== 곡명으로 검색 =====");
		System.out.print("곡명 입력 : ");
		ArrayList<Music> search = mc.searchTitle(sc.nextLine());
		
		if(search.isEmpty())
			System.out.println("검색된 곡 목록이 존재하지 않습니다.");
		
		for(Music m : search) {
			System.out.println(m);
		}
	}
	
	// 곡 정보 수정
	public void updateMusic() {
	 
		System.out.println("===== 곡 정보 수정 =====");
		System.out.print("수정할 곡의 제목을 입력하시오 : ");
		String title = sc.nextLine();
		
		System.out.print("수정할 가수명 : ");
		String updateArtist = sc.nextLine();
		System.out.print("수정할 제목명 : ");
		String updateTitle = sc.nextLine();
		
		Music updateMusic = new Music(updateArtist, updateTitle);
		int result = mc.updateMusic(title, updateMusic);	// 뮤직객체와 타이틀을 전달
		if(result > 0) {
			System.out.println("성공적으로 수정되었습니다.");			
		} else {
			System.out.println("수정할 곡을 찾지 못했습니다.");
		}
	}
	
	
	// 곡 삭제
	public void removeMusic() {
		System.out.println("===== 곡 삭제 =====");
		System.out.print("삭제할 곡의 제목을 입력하시오 : ");
		int result = mc.removeMusic(sc.nextLine());		// 제목을 전달하고 result 리턴
		
		if(result > 0) {
			System.out.println("성공적으로 수정되었습니다.");
		} else {
			System.out.println("삭제할 곡을 찾지 못했습니다.");
		}
		
	}

	// 정렬용 서브메뉴
	public void sortMenu() {
		System.out.println("******* 정렬용 메뉴 *******");
		System.out.println("1. 가수명 별 오름차순 정렬");
		System.out.println("2. 곡명 별 오름차순 정렬");
		System.out.println("3. 가수명 별 내림차순 정렬");
		System.out.println("4. 곡명 별 내림차순 정렬");
		System.out.print("메뉴 번호 선택 : ");
		int menu = sc.nextInt();
		
		ascDesc(menu);
	}

	private void ascDesc(int menu) {
		ArrayList<Music> sortList = new ArrayList<>();
		sortList.addAll(mc.selectList());	// 전체 리스트를 받아와서 sortList에 추가
		
		switch(menu) {
		case 1 :
			Collections.sort(sortList);
			break;
		case 2 :
			Collections.sort(sortList, new AscTitle());
			break;
		case 3 :
			Collections.sort(sortList, new DescArtist());
			break;
		case 4 :Collections.sort(sortList, new DescTitle());
			break;
		default :
			System.out.println("번호를 잘못 누르셨습니다.");
			return;
		}
		
		for(Music m : sortList) {
			System.out.println(m);
		}
	}


	
	
}




