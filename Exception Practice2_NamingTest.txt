package com.kh.practice2.controller;

import com.kh.practice2.model.NamingException;

public class NamingTest {
	
	public NamingTest() {}
	
	public boolean isReservedWord(String user) throws NamingException{
		String[] reservedWord = {"abstract", "assert", "boolean", "break", "byte", "case", "catch", "char", "class",
				"const", "continue", "default", "do", "double", "else", "enum", "extends", "false", "final", "finally",
				"float", "for", "if", "goto", "implements", "import", "instanceof", "int", "interface", "long", "native",
				"new", "null", "package", "private", "protected", "public", "return", "short", "static", "strictfp", "super",
				"switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "void", "volatile", "while"};
		for(String res : reservedWord) {
			if(res.equals(user)) {
				throw new NamingException("변수 명명 규칙에 어긋납니다.(예약어 사용 불가능)");
			}
		}
		return true;
	}
	
	public boolean isSpecialWord(String user) throws NamingException {
		
		for(int i = 0; i < user.length(); i++) {
		
			if(!(user.charAt(i) == '_' || user.charAt(i) == '$' || (user.charAt(i) >= 'a' && user.charAt(i) <= 'z')
					|| (user.charAt(i) >= 'A' && user.charAt(i) <= 'Z') || (user.charAt(i) >= '0' && user.charAt(i) <= '9'))) {
				throw new NamingException("변수 명명 규칙에 어긋납니다.(영문자와 '_', '$', 숫자 사용 가능)");
			}
		}
		return true;	
	}
	
	public boolean isNumFirst(String user) throws NamingException {
		if(user.charAt(0) >= '0' && user.charAt(0) <= '9') {
			throw new NamingException("변수 명명 규칙에 어긋납니다.(맨 앞 숫자 불가능)");
		} else
			return true;
	}
}
